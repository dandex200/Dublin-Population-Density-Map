{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","map","setMap","useState","boundariesLayer","setBoundariesLayer","choroplethLayer","setChoroplethLayer","isChoroplethActive","setIsChoroplethActive","useEffect","mapInstance","L","setView","tileLayer","attribution","addTo","fetch","then","response","json","data","geoJSON","style","color","weight","fillOpacity","onEachFeature","feature","layer","on","bindPopup","properties","total_pop","openPopup","eachLayer","l","setStyle","pop","fillColor","getColor","opacity","catch","error","console","remove","React","createElement","className","onClick","toggleChoropleth","removeLayer","id","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"kNA8IeA,MAzIf,WACE,MAAOC,EAAKC,GAAUC,mBAAS,OACxBC,EAAiBC,GAAsBF,mBAAS,OAChDG,EAAiBC,GAAsBJ,mBAAS,OAChDK,EAAoBC,GAAyBN,oBAAS,GAE7DO,oBAAU,KACR,MAEMC,EAAcC,IAAEX,IAAI,OAAOY,QAFZ,CAAC,SAAU,QAEuB,IAsFvD,OApFAD,IAAEE,UAAU,qDAAsD,CAChEC,YAAa,oCACZC,MAAML,GAETT,EAAOS,GAEPM,MAAM,uCACHC,KAAKC,GAAYA,EAASC,QAC1BF,KAAKG,IAEJ,MAAMjB,EAAkBQ,IAAEU,QAAQD,EAAM,CACtCE,MAAO,CACLC,MAAO,QACPC,OAAQ,GACRC,YAAa,GAEfC,cAAeA,CAACC,EAASC,KACvBA,EAAMC,GAAG,QAAS,WACXtB,EAqBHqB,EAAME,+BAA+BH,EAAQI,WAAWC,aAAaC,aAnBrE9B,EAAgB+B,UAAUC,IACxBA,EAAEC,SAAS,CACTb,MAAO,OACPC,OAAQ,GACRC,YAAa,OAKjBG,EAAMQ,SAAS,CACbb,MAAO,MACPC,OAAQ,EACRC,YAAa,KAIfG,EAAME,+BAA+BH,EAAQI,WAAWC,aAAaC,kBAS7E7B,EAAmBD,GACnBA,EAAgBY,MAAML,GAGtB,MAAML,EAAkBM,IAAEU,QAAQD,EAAM,CACtCE,MAAOK,IACL,MAAMU,EAAMV,EAAQI,WAAWC,UAC/B,MAAO,CACLM,UAAWC,EAASF,GACpBb,OAAQ,GACRgB,QAAS,EACTjB,MAAO,QACPE,YAAa,KAGjBC,cAAeA,CAACC,EAASC,KACvBA,EAAMC,GAAG,QAAS,WAChBD,EAAME,+BAA+BH,EAAQI,WAAWC,aAAaC,iBAK3E3B,EAAmBD,GAGnBK,EAAYmB,GAAG,aAAc,KACtBtB,GACHJ,EAAgB+B,UAAUC,IACxBA,EAAEC,SAAS,CACTb,MAAO,QACPC,OAAQ,GACRC,YAAa,UAMtBgB,MAAMC,GAASC,QAAQD,MAAM,4BAA6BA,IAEtD,KACLhC,EAAYkC,WAEb,IAEH,MAgBML,EAAYF,GACZA,GAAO,IAAY,UACnBA,GAAO,IAAY,UACnBA,GAAO,IAAY,UACnBA,GAAO,IAAY,UAChB,UAGT,OACEQ,IAAAC,cAAA,OAAKC,UAAU,OACbF,IAAAC,cAAA,UAAI,sCACJD,IAAAC,cAAA,UAAQE,QA3BaC,KAClBjD,GAAQG,GAAoBE,GAK7BE,GACFP,EAAIkD,YAAY7C,GAChBF,EAAgBY,MAAMf,KAEtBA,EAAIkD,YAAY/C,GAChBE,EAAgBU,MAAMf,IAExBQ,GAAuBD,IAXrBoC,QAAQD,MAAM,4CA0BXnC,EAAqB,kBAAoB,mBAE5CsC,IAAAC,cAAA,OAAKC,UAAU,iBACbF,IAAAC,cAAA,OAAKK,GAAG,QAAY,OC5HbC,MAZSC,IAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAvC,KAAAsC,EAAAE,KAAA,UAAqBxC,KAAKyC,IAAiD,IAAhDC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAASL,EACpEC,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCDDW,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHvB,IAAAC,cAACD,IAAMwB,WAAU,KACfxB,IAAAC,cAAC/C,EAAG,QAORqD","file":"static/js/main.5647e79f.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css'; // Leaflet CSS\nimport './App.css'; // Custom CSS for the map container\n\nfunction App() {\n  const [map, setMap] = useState(null);\n  const [boundariesLayer, setBoundariesLayer] = useState(null);\n  const [choroplethLayer, setChoroplethLayer] = useState(null);\n  const [isChoroplethActive, setIsChoroplethActive] = useState(false);\n\n  useEffect(() => {\n    const dublinCoords = [53.3498, -6.2603]; // Latitude, Longitude\n\n    const mapInstance = L.map('map').setView(dublinCoords, 12);\n\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: 'Â© OpenStreetMap contributors',\n    }).addTo(mapInstance);\n\n    setMap(mapInstance);\n\n    fetch('/layers/Dublin_SA1_TOTALPOP.geojson') // Update path if necessary\n      .then(response => response.json())\n      .then(data => {\n        // Create boundaries layer\n        const boundariesLayer = L.geoJSON(data, {\n          style: {\n            color: 'black',\n            weight: 0.5,\n            fillOpacity: 0\n          },\n          onEachFeature: (feature, layer) => {\n            layer.on('click', function () {\n              if (!isChoroplethActive) {\n                // Reset all layers to greyed-out state\n                boundariesLayer.eachLayer(l => {\n                  l.setStyle({\n                    color: 'grey',\n                    weight: 0.5,\n                    fillOpacity: 0.2\n                  });\n                });\n\n                // Highlight the clicked feature\n                layer.setStyle({\n                  color: 'red',\n                  weight: 2,\n                  fillOpacity: 0.5\n                });\n\n                // Bind popup with population data\n                layer.bindPopup(`Total Population: ${feature.properties.total_pop}`).openPopup();\n              } else {\n                // In choropleth mode, just show the popup without changing styles\n                layer.bindPopup(`Total Population: ${feature.properties.total_pop}`).openPopup();\n              }\n            });\n          }\n        });\n\n        setBoundariesLayer(boundariesLayer);\n        boundariesLayer.addTo(mapInstance);\n\n        // Create choropleth layer\n        const choroplethLayer = L.geoJSON(data, {\n          style: feature => {\n            const pop = feature.properties.total_pop;\n            return {\n              fillColor: getColor(pop),\n              weight: 0.5,\n              opacity: 1,\n              color: 'white',\n              fillOpacity: 0.7 // Adjust opacity for better visibility\n            };\n          },\n          onEachFeature: (feature, layer) => {\n            layer.on('click', function () {\n              layer.bindPopup(`Total Population: ${feature.properties.total_pop}`).openPopup();\n            });\n          }\n        });\n\n        setChoroplethLayer(choroplethLayer);\n\n        // Reset styles when popup is closed\n        mapInstance.on('popupclose', () => {\n          if (!isChoroplethActive) {\n            boundariesLayer.eachLayer(l => {\n              l.setStyle({\n                color: 'black',\n                weight: 0.5,\n                fillOpacity: 0\n              });\n            });\n          }\n        });\n      })\n      .catch(error => console.error('Error loading boundaries:', error));\n\n    return () => {\n      mapInstance.remove();\n    };\n  }, []); // Empty dependency array ensures this runs only once\n\n  const toggleChoropleth = () => {\n    if (!map || !boundariesLayer || !choroplethLayer) {\n      console.error(\"Map or layers are not initialized yet.\");\n      return;\n    }\n\n    if (isChoroplethActive) {\n      map.removeLayer(choroplethLayer);\n      boundariesLayer.addTo(map);\n    } else {\n      map.removeLayer(boundariesLayer);\n      choroplethLayer.addTo(map);\n    }\n    setIsChoroplethActive(!isChoroplethActive);\n  };\n\n  const getColor = (pop) => {\n    if (pop <= 208) return '#f2f0f7';\n    if (pop <= 247) return '#cbc9e2';\n    if (pop <= 289) return '#9e9ac8';\n    if (pop <= 344) return '#756bb1';\n    return '#54278f';\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Dublin Population Density Rail Map</h1>\n      <button onClick={toggleChoropleth}>\n        {isChoroplethActive ? 'Show Boundaries' : 'Show Choropleth'}\n      </button>\n      <div className=\"map-container\">\n        <div id=\"map\"></div> {/* Leaflet map container */}\n      </div>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}