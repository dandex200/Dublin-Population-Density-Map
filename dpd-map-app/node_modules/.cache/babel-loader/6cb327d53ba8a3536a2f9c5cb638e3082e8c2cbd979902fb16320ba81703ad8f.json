{"ast":null,"code":"var _jsxFileName = \"/home/g2square/Projects/Dublin_Population_Density_Map/dpd-map-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css'; // Leaflet CSS\nimport './App.css'; // Custom CSS for the map container\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [map, setMap] = useState(null);\n  const [boundariesLayer, setBoundariesLayer] = useState(null);\n  const [popup, setPopup] = useState(null); // State to manage the popup\n\n  // Initialize the map when the component mounts\n  useEffect(() => {\n    // Coordinates for Dublin, Ireland\n    const dublinCoords = [53.3498, -6.2603]; // Latitude, Longitude\n\n    // Create the map\n    const mapInstance = L.map('map').setView(dublinCoords, 12); // Centered on Dublin with zoom level 12\n\n    // Add the tile layer (OpenStreetMap)\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: '© OpenStreetMap contributors'\n    }).addTo(mapInstance);\n    setMap(mapInstance);\n\n    // Load the boundaries GeoJSON data\n    fetch('/layers/Dublin_SA1_TOTALPOP.geojson') // Update the path to your GeoJSON file\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Failed to load GeoJSON data');\n      }\n      return response.json();\n    }).then(data => {\n      console.log('GeoJSON data loaded successfully:', data);\n      if (!data.features || data.features.length === 0) {\n        console.error('GeoJSON has no valid features.');\n        return;\n      }\n      const boundariesLayer = L.geoJSON(data, {\n        style: {\n          color: 'black',\n          weight: 0.5,\n          fillOpacity: 0\n        },\n        onEachFeature: (feature, layer) => {\n          layer.on('click', e => {\n            var _feature$properties$t, _feature$properties;\n            const totalPop = (_feature$properties$t = (_feature$properties = feature.properties) === null || _feature$properties === void 0 ? void 0 : _feature$properties.total_pop) !== null && _feature$properties$t !== void 0 ? _feature$properties$t : 'Unknown';\n            if (popup) {\n              popup.remove();\n            }\n            const newPopup = L.popup().setLatLng(e.latlng).setContent(`Total Population: ${totalPop}`).openOn(mapInstance);\n            setPopup(newPopup);\n          });\n        }\n      });\n      setBoundariesLayer(boundariesLayer);\n      boundariesLayer.addTo(mapInstance);\n    }).catch(error => console.error('Error loading boundaries:', error));\n\n    // Cleanup function to remove the map when the component unmounts\n    return () => {\n      mapInstance.remove();\n    };\n  }, [popup]); // Add popup as a dependency to ensure proper cleanup\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Dublin Population Density Rail Map\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"map\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"/xeGXukJcPtDOYBw3ovuOQEwWOE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","L","jsxDEV","_jsxDEV","App","_s","map","setMap","boundariesLayer","setBoundariesLayer","popup","setPopup","dublinCoords","mapInstance","setView","tileLayer","attribution","addTo","fetch","then","response","ok","Error","json","data","console","log","features","length","error","geoJSON","style","color","weight","fillOpacity","onEachFeature","feature","layer","on","e","_feature$properties$t","_feature$properties","totalPop","properties","total_pop","remove","newPopup","setLatLng","latlng","setContent","openOn","catch","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","_c","$RefreshReg$"],"sources":["/home/g2square/Projects/Dublin_Population_Density_Map/dpd-map-app/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css'; // Leaflet CSS\nimport './App.css'; // Custom CSS for the map container\n\nfunction App() {\n  const [map, setMap] = useState(null);\n  const [boundariesLayer, setBoundariesLayer] = useState(null);\n  const [popup, setPopup] = useState(null); // State to manage the popup\n\n  // Initialize the map when the component mounts\n  useEffect(() => {\n    // Coordinates for Dublin, Ireland\n    const dublinCoords = [53.3498, -6.2603]; // Latitude, Longitude\n\n    // Create the map\n    const mapInstance = L.map('map').setView(dublinCoords, 12); // Centered on Dublin with zoom level 12\n\n    // Add the tile layer (OpenStreetMap)\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: '© OpenStreetMap contributors',\n    }).addTo(mapInstance);\n\n    setMap(mapInstance);\n\n    // Load the boundaries GeoJSON data\n    fetch('/layers/Dublin_SA1_TOTALPOP.geojson') // Update the path to your GeoJSON file\n      .then(response => {\n        if (!response.ok) {\n          throw new Error('Failed to load GeoJSON data');\n        }\n        return response.json();\n      })\n      .then(data => {\n        console.log('GeoJSON data loaded successfully:', data);\n      \n        if (!data.features || data.features.length === 0) {\n          console.error('GeoJSON has no valid features.');\n          return;\n        }\n      \n        const boundariesLayer = L.geoJSON(data, {\n          style: {\n            color: 'black',\n            weight: 0.5,\n            fillOpacity: 0\n          },\n          onEachFeature: (feature, layer) => {\n            layer.on('click', (e) => {\n              const totalPop = feature.properties?.total_pop ?? 'Unknown';\n              if (popup) {\n                popup.remove();\n              }\n              const newPopup = L.popup()\n                .setLatLng(e.latlng)\n                .setContent(`Total Population: ${totalPop}`)\n                .openOn(mapInstance);\n              setPopup(newPopup);\n            });\n          }\n        });\n      \n        setBoundariesLayer(boundariesLayer);\n        boundariesLayer.addTo(mapInstance);\n      })\n      .catch(error => console.error('Error loading boundaries:', error));\n\n    // Cleanup function to remove the map when the component unmounts\n    return () => {\n      mapInstance.remove();\n    };\n  }, [popup]); // Add popup as a dependency to ensure proper cleanup\n  \n  return (\n    <div className=\"App\">\n      <h1>Dublin Population Density Rail Map</h1>\n      <div className=\"map-container\">\n        <div id=\"map\"></div> {/* Leaflet map container */}\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,CAAC,MAAM,SAAS;AACvB,OAAO,0BAA0B,CAAC,CAAC;AACnC,OAAO,WAAW,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEpB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACpC,MAAM,CAACQ,eAAe,EAAEC,kBAAkB,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC5D,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE1C;EACAD,SAAS,CAAC,MAAM;IACd;IACA,MAAMa,YAAY,GAAG,CAAC,OAAO,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;;IAEzC;IACA,MAAMC,WAAW,GAAGZ,CAAC,CAACK,GAAG,CAAC,KAAK,CAAC,CAACQ,OAAO,CAACF,YAAY,EAAE,EAAE,CAAC,CAAC,CAAC;;IAE5D;IACAX,CAAC,CAACc,SAAS,CAAC,oDAAoD,EAAE;MAChEC,WAAW,EAAE;IACf,CAAC,CAAC,CAACC,KAAK,CAACJ,WAAW,CAAC;IAErBN,MAAM,CAACM,WAAW,CAAC;;IAEnB;IACAK,KAAK,CAAC,qCAAqC,CAAC,CAAC;IAAA,CAC1CC,IAAI,CAACC,QAAQ,IAAI;MAChB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChD;MACA,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,CACDJ,IAAI,CAACK,IAAI,IAAI;MACZC,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEF,IAAI,CAAC;MAEtD,IAAI,CAACA,IAAI,CAACG,QAAQ,IAAIH,IAAI,CAACG,QAAQ,CAACC,MAAM,KAAK,CAAC,EAAE;QAChDH,OAAO,CAACI,KAAK,CAAC,gCAAgC,CAAC;QAC/C;MACF;MAEA,MAAMrB,eAAe,GAAGP,CAAC,CAAC6B,OAAO,CAACN,IAAI,EAAE;QACtCO,KAAK,EAAE;UACLC,KAAK,EAAE,OAAO;UACdC,MAAM,EAAE,GAAG;UACXC,WAAW,EAAE;QACf,CAAC;QACDC,aAAa,EAAEA,CAACC,OAAO,EAAEC,KAAK,KAAK;UACjCA,KAAK,CAACC,EAAE,CAAC,OAAO,EAAGC,CAAC,IAAK;YAAA,IAAAC,qBAAA,EAAAC,mBAAA;YACvB,MAAMC,QAAQ,IAAAF,qBAAA,IAAAC,mBAAA,GAAGL,OAAO,CAACO,UAAU,cAAAF,mBAAA,uBAAlBA,mBAAA,CAAoBG,SAAS,cAAAJ,qBAAA,cAAAA,qBAAA,GAAI,SAAS;YAC3D,IAAI9B,KAAK,EAAE;cACTA,KAAK,CAACmC,MAAM,CAAC,CAAC;YAChB;YACA,MAAMC,QAAQ,GAAG7C,CAAC,CAACS,KAAK,CAAC,CAAC,CACvBqC,SAAS,CAACR,CAAC,CAACS,MAAM,CAAC,CACnBC,UAAU,CAAC,qBAAqBP,QAAQ,EAAE,CAAC,CAC3CQ,MAAM,CAACrC,WAAW,CAAC;YACtBF,QAAQ,CAACmC,QAAQ,CAAC;UACpB,CAAC,CAAC;QACJ;MACF,CAAC,CAAC;MAEFrC,kBAAkB,CAACD,eAAe,CAAC;MACnCA,eAAe,CAACS,KAAK,CAACJ,WAAW,CAAC;IACpC,CAAC,CAAC,CACDsC,KAAK,CAACtB,KAAK,IAAIJ,OAAO,CAACI,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC,CAAC;;IAEpE;IACA,OAAO,MAAM;MACXhB,WAAW,CAACgC,MAAM,CAAC,CAAC;IACtB,CAAC;EACH,CAAC,EAAE,CAACnC,KAAK,CAAC,CAAC,CAAC,CAAC;;EAEb,oBACEP,OAAA;IAAKiD,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBlD,OAAA;MAAAkD,QAAA,EAAI;IAAkC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC3CtD,OAAA;MAAKiD,SAAS,EAAC,eAAe;MAAAC,QAAA,gBAC5BlD,OAAA;QAAKuD,EAAE,EAAC;MAAK;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,KAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACpD,EAAA,CA5EQD,GAAG;AAAAuD,EAAA,GAAHvD,GAAG;AA8EZ,eAAeA,GAAG;AAAC,IAAAuD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}