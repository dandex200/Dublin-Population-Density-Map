{"ast":null,"code":"import React,{useEffect,useState}from'react';import L from'leaflet';import'leaflet/dist/leaflet.css';// Leaflet CSS\nimport'./App.css';// Custom CSS for the map container\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[map,setMap]=useState(null);const[boundariesLayer,setBoundariesLayer]=useState(null);const[choroplethLayer,setChoroplethLayer]=useState(null);const[isChoroplethActive,setIsChoroplethActive]=useState(false);useEffect(()=>{const dublinCoords=[53.3498,-6.2603];// Latitude, Longitude\nconst mapInstance=L.map('map').setView(dublinCoords,12);L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',{attribution:'© OpenStreetMap contributors'}).addTo(mapInstance);setMap(mapInstance);fetch('/layers/Dublin_SA1_TOTALPOP.geojson')// Update path if necessary\n.then(response=>response.json()).then(data=>{// Create boundaries layer\nconst boundariesLayer=L.geoJSON(data,{style:{color:'black',weight:0.5,fillOpacity:0},onEachFeature:(feature,layer)=>{layer.on('click',function(){if(!isChoroplethActive){// Reset all layers to greyed-out state\nboundariesLayer.eachLayer(l=>{l.setStyle({color:'grey',weight:0.5,fillOpacity:0.2});});// Highlight the clicked feature\nlayer.setStyle({color:'red',weight:2,fillOpacity:0.5});// Bind popup with population data\nlayer.bindPopup(`Total Population: ${feature.properties.total_pop}`).openPopup();}else{// In choropleth mode, just show the popup without changing styles\nlayer.bindPopup(`Total Population: ${feature.properties.total_pop}`).openPopup();}});}});setBoundariesLayer(boundariesLayer);boundariesLayer.addTo(mapInstance);// Create choropleth layer\nconst choroplethLayer=L.geoJSON(data,{style:feature=>{const pop=feature.properties.total_pop;return{fillColor:getColor(pop),weight:0.5,opacity:1,color:'white',fillOpacity:0.7// Adjust opacity for better visibility\n};},onEachFeature:(feature,layer)=>{layer.on('click',function(){layer.bindPopup(`Total Population: ${feature.properties.total_pop}`).openPopup();});}});setChoroplethLayer(choroplethLayer);// Reset styles when popup is closed\nmapInstance.on('popupclose',()=>{if(!isChoroplethActive){boundariesLayer.eachLayer(l=>{l.setStyle({color:'black',weight:0.5,fillOpacity:0});});}});}).catch(error=>console.error('Error loading boundaries:',error));return()=>{mapInstance.remove();};},[]);// Empty dependency array ensures this runs only once\nconst toggleChoropleth=()=>{if(!map||!boundariesLayer||!choroplethLayer){console.error(\"Map or layers are not initialized yet.\");return;}if(isChoroplethActive){map.removeLayer(choroplethLayer);boundariesLayer.addTo(map);}else{map.removeLayer(boundariesLayer);choroplethLayer.addTo(map);}setIsChoroplethActive(!isChoroplethActive);};const getColor=pop=>{if(pop<=208)return'#f2f0f7';if(pop<=247)return'#cbc9e2';if(pop<=289)return'#9e9ac8';if(pop<=344)return'#756bb1';return'#54278f';};return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Dublin Population Density Rail Map\"}),/*#__PURE__*/_jsx(\"button\",{onClick:toggleChoropleth,children:isChoroplethActive?'Show Boundaries':'Show Choropleth'}),/*#__PURE__*/_jsxs(\"div\",{className:\"map-container\",children:[/*#__PURE__*/_jsx(\"div\",{id:\"map\"}),\" \"]})]});}export default App;","map":{"version":3,"names":["React","useEffect","useState","L","jsx","_jsx","jsxs","_jsxs","App","map","setMap","boundariesLayer","setBoundariesLayer","choroplethLayer","setChoroplethLayer","isChoroplethActive","setIsChoroplethActive","dublinCoords","mapInstance","setView","tileLayer","attribution","addTo","fetch","then","response","json","data","geoJSON","style","color","weight","fillOpacity","onEachFeature","feature","layer","on","eachLayer","l","setStyle","bindPopup","properties","total_pop","openPopup","pop","fillColor","getColor","opacity","catch","error","console","remove","toggleChoropleth","removeLayer","className","children","onClick","id"],"sources":["/home/g2square/Projects/Dublin_Population_Density_Map/Dublin-Population-Density-Map/dpd-map-app/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css'; // Leaflet CSS\nimport './App.css'; // Custom CSS for the map container\n\nfunction App() {\n  const [map, setMap] = useState(null);\n  const [boundariesLayer, setBoundariesLayer] = useState(null);\n  const [choroplethLayer, setChoroplethLayer] = useState(null);\n  const [isChoroplethActive, setIsChoroplethActive] = useState(false);\n\n  useEffect(() => {\n    const dublinCoords = [53.3498, -6.2603]; // Latitude, Longitude\n\n    const mapInstance = L.map('map').setView(dublinCoords, 12);\n\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: '© OpenStreetMap contributors',\n    }).addTo(mapInstance);\n\n    setMap(mapInstance);\n\n    fetch('/layers/Dublin_SA1_TOTALPOP.geojson') // Update path if necessary\n      .then(response => response.json())\n      .then(data => {\n        // Create boundaries layer\n        const boundariesLayer = L.geoJSON(data, {\n          style: {\n            color: 'black',\n            weight: 0.5,\n            fillOpacity: 0\n          },\n          onEachFeature: (feature, layer) => {\n            layer.on('click', function () {\n              if (!isChoroplethActive) {\n                // Reset all layers to greyed-out state\n                boundariesLayer.eachLayer(l => {\n                  l.setStyle({\n                    color: 'grey',\n                    weight: 0.5,\n                    fillOpacity: 0.2\n                  });\n                });\n\n                // Highlight the clicked feature\n                layer.setStyle({\n                  color: 'red',\n                  weight: 2,\n                  fillOpacity: 0.5\n                });\n\n                // Bind popup with population data\n                layer.bindPopup(`Total Population: ${feature.properties.total_pop}`).openPopup();\n              } else {\n                // In choropleth mode, just show the popup without changing styles\n                layer.bindPopup(`Total Population: ${feature.properties.total_pop}`).openPopup();\n              }\n            });\n          }\n        });\n\n        setBoundariesLayer(boundariesLayer);\n        boundariesLayer.addTo(mapInstance);\n\n        // Create choropleth layer\n        const choroplethLayer = L.geoJSON(data, {\n          style: feature => {\n            const pop = feature.properties.total_pop;\n            return {\n              fillColor: getColor(pop),\n              weight: 0.5,\n              opacity: 1,\n              color: 'white',\n              fillOpacity: 0.7 // Adjust opacity for better visibility\n            };\n          },\n          onEachFeature: (feature, layer) => {\n            layer.on('click', function () {\n              layer.bindPopup(`Total Population: ${feature.properties.total_pop}`).openPopup();\n            });\n          }\n        });\n\n        setChoroplethLayer(choroplethLayer);\n\n        // Reset styles when popup is closed\n        mapInstance.on('popupclose', () => {\n          if (!isChoroplethActive) {\n            boundariesLayer.eachLayer(l => {\n              l.setStyle({\n                color: 'black',\n                weight: 0.5,\n                fillOpacity: 0\n              });\n            });\n          }\n        });\n      })\n      .catch(error => console.error('Error loading boundaries:', error));\n\n    return () => {\n      mapInstance.remove();\n    };\n  }, []); // Empty dependency array ensures this runs only once\n\n  const toggleChoropleth = () => {\n    if (!map || !boundariesLayer || !choroplethLayer) {\n      console.error(\"Map or layers are not initialized yet.\");\n      return;\n    }\n\n    if (isChoroplethActive) {\n      map.removeLayer(choroplethLayer);\n      boundariesLayer.addTo(map);\n    } else {\n      map.removeLayer(boundariesLayer);\n      choroplethLayer.addTo(map);\n    }\n    setIsChoroplethActive(!isChoroplethActive);\n  };\n\n  const getColor = (pop) => {\n    if (pop <= 208) return '#f2f0f7';\n    if (pop <= 247) return '#cbc9e2';\n    if (pop <= 289) return '#9e9ac8';\n    if (pop <= 344) return '#756bb1';\n    return '#54278f';\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Dublin Population Density Rail Map</h1>\n      <button onClick={toggleChoropleth}>\n        {isChoroplethActive ? 'Show Boundaries' : 'Show Choropleth'}\n      </button>\n      <div className=\"map-container\">\n        <div id=\"map\"></div> {/* Leaflet map container */}\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}