{"ast":null,"code":"var _jsxFileName = \"/home/g2square/Projects/Dublin_Population_Density_Map/dpd-map-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css'; // Leaflet CSS\nimport './App.css'; // Custom CSS for the map container\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [map, setMap] = useState(null);\n  const [boundariesLayer, setBoundariesLayer] = useState(null);\n  const [choroplethLayer, setChoroplethLayer] = useState(null);\n  const [isChoroplethActive, setIsChoroplethActive] = useState(false);\n  useEffect(() => {\n    const dublinCoords = [53.3498, -6.2603]; // Latitude, Longitude\n\n    const mapInstance = L.map('map').setView(dublinCoords, 12);\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: '© OpenStreetMap contributors'\n    }).addTo(mapInstance);\n    setMap(mapInstance);\n    fetch('/layers/Dublin_SA1_TOTALPOP.geojson') // Update path if necessary\n    .then(response => response.json()).then(data => {\n      // Calculate area for each feature and add population density\n      data.features.forEach(feature => {\n        const area = L.GeometryUtil.geodesicArea(feature.geometry.coordinates);\n        feature.properties.area = area; // Area in square meters\n        feature.properties.pop_density = feature.properties.total_pop / (area / 1000000); // Population per square kilometer\n      });\n\n      // Create boundaries layer\n      const boundariesLayer = L.geoJSON(data, {\n        style: {\n          color: 'black',\n          weight: 0.5,\n          fillOpacity: 0\n        },\n        onEachFeature: (feature, layer) => {\n          layer.on('click', function () {\n            if (!isChoroplethActive) {\n              // Reset all layers to greyed-out state\n              boundariesLayer.eachLayer(l => {\n                l.setStyle({\n                  color: 'grey',\n                  weight: 0.5,\n                  fillOpacity: 0.2\n                });\n              });\n\n              // Highlight the clicked feature\n              layer.setStyle({\n                color: 'red',\n                weight: 2,\n                fillOpacity: 0.5\n              });\n\n              // Bind popup with population data\n              layer.bindPopup(`Total Population: ${feature.properties.total_pop}<br>Population Density: ${feature.properties.pop_density.toFixed(2)}/km²`).openPopup();\n            } else {\n              // In choropleth mode, just show the popup without changing styles\n              layer.bindPopup(`Total Population: ${feature.properties.total_pop}<br>Population Density: ${feature.properties.pop_density.toFixed(2)}/km²`).openPopup();\n            }\n          });\n        }\n      });\n      setBoundariesLayer(boundariesLayer);\n      boundariesLayer.addTo(mapInstance);\n\n      // Create choropleth layer\n      const choroplethLayer = L.geoJSON(data, {\n        style: feature => {\n          const density = feature.properties.pop_density;\n          return {\n            fillColor: getColor(density),\n            weight: 0.5,\n            opacity: 1,\n            color: 'white',\n            fillOpacity: 0.7 // Adjust opacity for better visibility\n          };\n        },\n        onEachFeature: (feature, layer) => {\n          layer.on('click', function () {\n            layer.bindPopup(`Total Population: ${feature.properties.total_pop}<br>Population Density: ${feature.properties.pop_density.toFixed(2)}/km²`).openPopup();\n          });\n        }\n      });\n      setChoroplethLayer(choroplethLayer);\n\n      // Reset styles when popup is closed\n      mapInstance.on('popupclose', () => {\n        if (!isChoroplethActive) {\n          boundariesLayer.eachLayer(l => {\n            l.setStyle({\n              color: 'black',\n              weight: 0.5,\n              fillOpacity: 0\n            });\n          });\n        }\n      });\n    }).catch(error => console.error('Error loading boundaries:', error));\n    return () => {\n      mapInstance.remove();\n    };\n  }, [isChoroplethActive]);\n  const toggleChoropleth = () => {\n    if (!map || !boundariesLayer || !choroplethLayer) {\n      console.error(\"Map or layers are not initialized yet.\");\n      return;\n    }\n    if (isChoroplethActive) {\n      map.removeLayer(choroplethLayer);\n      boundariesLayer.addTo(map);\n    } else {\n      map.removeLayer(boundariesLayer);\n      choroplethLayer.addTo(map);\n    }\n    setIsChoroplethActive(!isChoroplethActive);\n  };\n  const getColor = density => {\n    if (density <= 100) return '#f2f0f7';\n    if (density <= 500) return '#cbc9e2';\n    if (density <= 1000) return '#9e9ac8';\n    if (density <= 2000) return '#756bb1';\n    return '#54278f';\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Dublin Population Density Rail Map\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleChoropleth,\n      children: isChoroplethActive ? 'Show Boundaries' : 'Show Choropleth'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"map\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"/DPcROAyp+q/1Y7ZZlPEAZZJzew=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","L","jsxDEV","_jsxDEV","App","_s","map","setMap","boundariesLayer","setBoundariesLayer","choroplethLayer","setChoroplethLayer","isChoroplethActive","setIsChoroplethActive","dublinCoords","mapInstance","setView","tileLayer","attribution","addTo","fetch","then","response","json","data","features","forEach","feature","area","GeometryUtil","geodesicArea","geometry","coordinates","properties","pop_density","total_pop","geoJSON","style","color","weight","fillOpacity","onEachFeature","layer","on","eachLayer","l","setStyle","bindPopup","toFixed","openPopup","density","fillColor","getColor","opacity","catch","error","console","remove","toggleChoropleth","removeLayer","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","id","_c","$RefreshReg$"],"sources":["/home/g2square/Projects/Dublin_Population_Density_Map/dpd-map-app/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css'; // Leaflet CSS\nimport './App.css'; // Custom CSS for the map container\n\nfunction App() {\n  const [map, setMap] = useState(null);\n  const [boundariesLayer, setBoundariesLayer] = useState(null);\n  const [choroplethLayer, setChoroplethLayer] = useState(null);\n  const [isChoroplethActive, setIsChoroplethActive] = useState(false);\n\n  useEffect(() => {\n    const dublinCoords = [53.3498, -6.2603]; // Latitude, Longitude\n\n    const mapInstance = L.map('map').setView(dublinCoords, 12);\n\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: '© OpenStreetMap contributors',\n    }).addTo(mapInstance);\n\n    setMap(mapInstance);\n\n    fetch('/layers/Dublin_SA1_TOTALPOP.geojson') // Update path if necessary\n      .then(response => response.json())\n      .then(data => {\n        // Calculate area for each feature and add population density\n        data.features.forEach(feature => {\n          const area = L.GeometryUtil.geodesicArea(feature.geometry.coordinates);\n          feature.properties.area = area; // Area in square meters\n          feature.properties.pop_density = feature.properties.total_pop / (area / 1000000); // Population per square kilometer\n        });\n\n        // Create boundaries layer\n        const boundariesLayer = L.geoJSON(data, {\n          style: {\n            color: 'black',\n            weight: 0.5,\n            fillOpacity: 0\n          },\n          onEachFeature: (feature, layer) => {\n            layer.on('click', function () {\n              if (!isChoroplethActive) {\n                // Reset all layers to greyed-out state\n                boundariesLayer.eachLayer(l => {\n                  l.setStyle({\n                    color: 'grey',\n                    weight: 0.5,\n                    fillOpacity: 0.2\n                  });\n                });\n\n                // Highlight the clicked feature\n                layer.setStyle({\n                  color: 'red',\n                  weight: 2,\n                  fillOpacity: 0.5\n                });\n\n                // Bind popup with population data\n                layer.bindPopup(`Total Population: ${feature.properties.total_pop}<br>Population Density: ${feature.properties.pop_density.toFixed(2)}/km²`).openPopup();\n              } else {\n                // In choropleth mode, just show the popup without changing styles\n                layer.bindPopup(`Total Population: ${feature.properties.total_pop}<br>Population Density: ${feature.properties.pop_density.toFixed(2)}/km²`).openPopup();\n              }\n            });\n          }\n        });\n\n        setBoundariesLayer(boundariesLayer);\n        boundariesLayer.addTo(mapInstance);\n\n        // Create choropleth layer\n        const choroplethLayer = L.geoJSON(data, {\n          style: feature => {\n            const density = feature.properties.pop_density;\n            return {\n              fillColor: getColor(density),\n              weight: 0.5,\n              opacity: 1,\n              color: 'white',\n              fillOpacity: 0.7 // Adjust opacity for better visibility\n            };\n          },\n          onEachFeature: (feature, layer) => {\n            layer.on('click', function () {\n              layer.bindPopup(`Total Population: ${feature.properties.total_pop}<br>Population Density: ${feature.properties.pop_density.toFixed(2)}/km²`).openPopup();\n            });\n          }\n        });\n\n        setChoroplethLayer(choroplethLayer);\n\n        // Reset styles when popup is closed\n        mapInstance.on('popupclose', () => {\n          if (!isChoroplethActive) {\n            boundariesLayer.eachLayer(l => {\n              l.setStyle({\n                color: 'black',\n                weight: 0.5,\n                fillOpacity: 0\n              });\n            });\n          }\n        });\n      })\n      .catch(error => console.error('Error loading boundaries:', error));\n\n    return () => {\n      mapInstance.remove();\n    };\n  }, [isChoroplethActive]);\n\n  const toggleChoropleth = () => {\n    if (!map || !boundariesLayer || !choroplethLayer) {\n      console.error(\"Map or layers are not initialized yet.\");\n      return;\n    }\n\n    if (isChoroplethActive) {\n      map.removeLayer(choroplethLayer);\n      boundariesLayer.addTo(map);\n    } else {\n      map.removeLayer(boundariesLayer);\n      choroplethLayer.addTo(map);\n    }\n    setIsChoroplethActive(!isChoroplethActive);\n  };\n\n  const getColor = (density) => {\n    if (density <= 100) return '#f2f0f7';\n    if (density <= 500) return '#cbc9e2';\n    if (density <= 1000) return '#9e9ac8';\n    if (density <= 2000) return '#756bb1';\n    return '#54278f';\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Dublin Population Density Rail Map</h1>\n      <button onClick={toggleChoropleth}>\n        {isChoroplethActive ? 'Show Boundaries' : 'Show Choropleth'}\n      </button>\n      <div className=\"map-container\">\n        <div id=\"map\"></div> {/* Leaflet map container */}\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}