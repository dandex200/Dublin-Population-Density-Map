{"ast":null,"code":"var _jsxFileName = \"/home/g2square/Projects/Dublin_Population_Density_Map/Dublin-Population-Density-Map/dpd-map-app/src/App.js\";\nimport React, { useEffect, useState } from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css'; // Leaflet CSS\nimport './App.css'; // Custom CSS for the map container\n\nfunction App() {\n  const [map, setMap] = useState(null);\n  const [boundariesLayer, setBoundariesLayer] = useState(null);\n  const [choroplethLayer, setChoroplethLayer] = useState(null);\n  const [isChoroplethActive, setIsChoroplethActive] = useState(false);\n  useEffect(() => {\n    const dublinCoords = [53.3498, -6.2603]; // Latitude, Longitude\n\n    const mapInstance = L.map('map').setView(dublinCoords, 12);\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: '© OpenStreetMap contributors'\n    }).addTo(mapInstance);\n    setMap(mapInstance);\n\n    // Fetch GeoJSON data and add layers\n    fetch('/layers/Dublin_SA1_TOTALPOP_DEN.geojson') // Update path if necessary\n    .then(response => response.json()).then(data => {\n      console.log('GeoJSON Data Loaded:', data); // Log the data to verify\n\n      // Create boundaries layer\n      const boundariesLayer = L.geoJSON(data, {\n        style: {\n          color: 'black',\n          weight: 0.5,\n          fillOpacity: 0\n        },\n        onEachFeature: (feature, layer) => {\n          layer.on('click', function () {\n            if (!isChoroplethActive) {\n              // Reset all layers to greyed-out state\n              boundariesLayer.eachLayer(l => {\n                l.setStyle({\n                  color: 'grey',\n                  weight: 0.5,\n                  fillOpacity: 0.2\n                });\n              });\n\n              // Highlight the clicked feature\n              layer.setStyle({\n                color: 'red',\n                weight: 2,\n                fillOpacity: 0.5\n              });\n\n              // Bind popup with population data\n              layer.bindPopup(`Total Population: ${feature.properties.total_pop}`).openPopup();\n            } else {\n              // In choropleth mode, just show the popup without changing styles\n              layer.bindPopup(`Total Population: ${feature.properties.total_pop}`).openPopup();\n            }\n          });\n        }\n      });\n      setBoundariesLayer(boundariesLayer);\n      boundariesLayer.addTo(mapInstance);\n\n      // Create choropleth layer\n      const choroplethLayer = L.geoJSON(data, {\n        style: feature => {\n          const density = feature.properties.equalized_density;\n          return {\n            fillColor: getColor(density),\n            weight: 0.5,\n            opacity: 1,\n            color: 'white',\n            fillOpacity: 0.7 // Adjust opacity for better visibility\n          };\n        },\n        onEachFeature: (feature, layer) => {\n          layer.on('click', function () {\n            layer.bindPopup(`Total Population: ${feature.properties.total_pop}`).openPopup();\n          });\n        }\n      });\n      setChoroplethLayer(choroplethLayer);\n\n      // Reset styles when popup is closed\n      mapInstance.on('popupclose', () => {\n        if (!isChoroplethActive) {\n          boundariesLayer.eachLayer(l => {\n            l.setStyle({\n              color: 'black',\n              weight: 0.5,\n              fillOpacity: 0\n            });\n          });\n        }\n      });\n    }).catch(error => console.error('Error loading boundaries:', error));\n    return () => {\n      mapInstance.remove();\n    };\n  }, [isChoroplethActive]); // Add isChoroplethActive as a dependency // Empty dependency array ensures this runs only once\n\n  const toggleChoropleth = () => {\n    if (!map || !boundariesLayer || !choroplethLayer) {\n      console.error(\"Map or layers are not initialized yet.\");\n      return;\n    }\n    if (isChoroplethActive) {\n      map.removeLayer(choroplethLayer);\n      boundariesLayer.addTo(map);\n    } else {\n      map.removeLayer(boundariesLayer);\n      choroplethLayer.addTo(map);\n    }\n    setIsChoroplethActive(!isChoroplethActive);\n  };\n  const getColor = density => {\n    if (density <= 0.05) return '#f2f0f7'; // Lightest color for low density\n    if (density <= 0.1) return '#cbc9e2';\n    if (density <= 0.2) return '#9e9ac8';\n    if (density <= 0.3) return '#756bb1';\n    return '#54278f'; // Darkest color for high density\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }\n  }, \"Dublin Population Density Rail Map\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: toggleChoropleth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }\n  }, isChoroplethActive ? 'Show Boundaries' : 'Show Choropleth'), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"map\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }\n  }), \" \"));\n}\nexport default App;","map":{"version":3,"names":["React","useEffect","useState","L","App","map","setMap","boundariesLayer","setBoundariesLayer","choroplethLayer","setChoroplethLayer","isChoroplethActive","setIsChoroplethActive","dublinCoords","mapInstance","setView","tileLayer","attribution","addTo","fetch","then","response","json","data","console","log","geoJSON","style","color","weight","fillOpacity","onEachFeature","feature","layer","on","eachLayer","l","setStyle","bindPopup","properties","total_pop","openPopup","density","equalized_density","fillColor","getColor","opacity","catch","error","remove","toggleChoropleth","removeLayer","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onClick","id"],"sources":["/home/g2square/Projects/Dublin_Population_Density_Map/Dublin-Population-Density-Map/dpd-map-app/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css'; // Leaflet CSS\nimport './App.css'; // Custom CSS for the map container\n\nfunction App() {\n  const [map, setMap] = useState(null);\n  const [boundariesLayer, setBoundariesLayer] = useState(null);\n  const [choroplethLayer, setChoroplethLayer] = useState(null);\n  const [isChoroplethActive, setIsChoroplethActive] = useState(false);\n\n  useEffect(() => {\n    const dublinCoords = [53.3498, -6.2603]; // Latitude, Longitude\n  \n    const mapInstance = L.map('map').setView(dublinCoords, 12);\n  \n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: '© OpenStreetMap contributors',\n    }).addTo(mapInstance);\n  \n    setMap(mapInstance);\n  \n    // Fetch GeoJSON data and add layers\n    fetch('/layers/Dublin_SA1_TOTALPOP_DEN.geojson') // Update path if necessary\n      .then(response => response.json())\n      .then(data => {\n        console.log('GeoJSON Data Loaded:', data); // Log the data to verify\n  \n        // Create boundaries layer\n        const boundariesLayer = L.geoJSON(data, {\n          style: {\n            color: 'black',\n            weight: 0.5,\n            fillOpacity: 0\n          },\n          onEachFeature: (feature, layer) => {\n            layer.on('click', function () {\n              if (!isChoroplethActive) {\n                // Reset all layers to greyed-out state\n                boundariesLayer.eachLayer(l => {\n                  l.setStyle({\n                    color: 'grey',\n                    weight: 0.5,\n                    fillOpacity: 0.2\n                  });\n                });\n  \n                // Highlight the clicked feature\n                layer.setStyle({\n                  color: 'red',\n                  weight: 2,\n                  fillOpacity: 0.5\n                });\n  \n                // Bind popup with population data\n                layer.bindPopup(`Total Population: ${feature.properties.total_pop}`).openPopup();\n              } else {\n                // In choropleth mode, just show the popup without changing styles\n                layer.bindPopup(`Total Population: ${feature.properties.total_pop}`).openPopup();\n              }\n            });\n          }\n        });\n  \n        setBoundariesLayer(boundariesLayer);\n        boundariesLayer.addTo(mapInstance);\n  \n        // Create choropleth layer\n        const choroplethLayer = L.geoJSON(data, {\n          style: feature => {\n            const density = feature.properties.equalized_density;\n            return {\n              fillColor: getColor(density),\n              weight: 0.5,\n              opacity: 1,\n              color: 'white',\n              fillOpacity: 0.7 // Adjust opacity for better visibility\n            };\n          },\n          onEachFeature: (feature, layer) => {\n            layer.on('click', function () {\n              layer.bindPopup(`Total Population: ${feature.properties.total_pop}`).openPopup();\n            });\n          }\n        });\n  \n        setChoroplethLayer(choroplethLayer);\n  \n        // Reset styles when popup is closed\n        mapInstance.on('popupclose', () => {\n          if (!isChoroplethActive) {\n            boundariesLayer.eachLayer(l => {\n              l.setStyle({\n                color: 'black',\n                weight: 0.5,\n                fillOpacity: 0\n              });\n            });\n          }\n        });\n      })\n      .catch(error => console.error('Error loading boundaries:', error));\n  \n    return () => {\n      mapInstance.remove();\n    };\n  }, [isChoroplethActive]); // Add isChoroplethActive as a dependency // Empty dependency array ensures this runs only once\n\n\n\n  const toggleChoropleth = () => {\n    if (!map || !boundariesLayer || !choroplethLayer) {\n      console.error(\"Map or layers are not initialized yet.\");\n      return;\n    }\n  \n    if (isChoroplethActive) {\n      map.removeLayer(choroplethLayer);\n      boundariesLayer.addTo(map);\n    } else {\n      map.removeLayer(boundariesLayer);\n      choroplethLayer.addTo(map);\n    }\n    setIsChoroplethActive(!isChoroplethActive);\n  };\n\n  const getColor = (density) => {\n    if (density <= 0.05) return '#f2f0f7'; // Lightest color for low density\n    if (density <= 0.1) return '#cbc9e2';\n    if (density <= 0.2) return '#9e9ac8';\n    if (density <= 0.3) return '#756bb1';\n    return '#54278f'; // Darkest color for high density\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Dublin Population Density Rail Map</h1>\n      <button onClick={toggleChoropleth}>\n        {isChoroplethActive ? 'Show Boundaries' : 'Show Choropleth'}\n      </button>\n      <div className=\"map-container\">\n        <div id=\"map\"></div> {/* Leaflet map container */}\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}